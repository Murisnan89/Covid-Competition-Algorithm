function [sFeat,Sf,Nf,f1score] =COVIDOA-C(feat,label,HO,nPop,MaxIt,minVal,maxVal,D,CostFunction,MR,CR,shifttingNo,numOfSubprotiens)

VarMin =zeros(1,D).*minVal;
VarMax =ones(1,D).*maxVal;
empty_individual.Position=[];
empty_individual.Cost=[];
pop=repmat(empty_individual,nPop,1);
alpha = rand(nPop, D);
fitness = @FitnessFunction;
D = size(feat,2); 
X = zeros(nPop,D);

%Initiale Population
for i = 1:nPop
    pop(i).Position = minVal + alpha(i,:) .* (maxVal - minVal);
    for d = 1:D
      pop(i).Position = 1./(1 + exp(-pop(i).Position));
      if pop(i).Position > rand()
         X(i,d)=1;
      else
         X(i,d)=0;
      end
    end   
end

bestsol.Position=zeros(1,nPop);
bestsol.Cost = inf;
for i = 1:nPop
    % Evaluate Solution
    pop(i).Cost = CostFunction(pop(i).Position);
    pop(i).Cost = fitness(feat,label,X(i,:),HO);
    if pop(i).Cost < bestsol.Cost
        bestsol.Cost = pop(i).Cost;
        bestsol.Position=pop(i).Position;
        Xbestsol = X(i,:);
    end
end

CR   = round(CR * nPop); 
X1   = zeros(CR, D);
X2   = zeros(CR, D);
curve = nan(MaxIt, 1);
%--------- main loop ------------------------------------
for it = 1:MaxIt
    %%--------------------------------------------------------
    %% virus replication phase through frameshifting technique
    %%--------------------------------------------------------
    %%---------- roulette wheel selection----------
    c = [pop.Cost];
    avgc = mean(c);
    if avgc ~= 0
        c = c/avgc;
    end
    probs = exp(nPop*c);
    x = zeros(nPop,D);
    for k=1:nPop
        parent = pop(RouletteWheelSelection(probs));
        parent.Position = max(parent.Position, VarMin);
        parent.Position = min(parent.Position, VarMax);
        %--------- frameshifting ------------------
        x(k,:)=parent.Position;
        for t=1:numOfSubprotiens
            for i=1:D-shifttingNo
                x(k,i)=x(k,i+shifttingNo); 
            end
             r=rand();
             x(k,:)=[x(k,1:D-shifttingNo) r]; 
        end
        %%---- apply Competition Strategy from RGA----
        for i=1:CR
            k1 = RouletteWheelSelection(probs);
            k2 = RouletteWheelSelection(probs);
            P1 = X(k1,:);
            P2 = X(k2,:);
            ind = randi([1, nPop-1]);
            X1(i,:) = [P1(1 : ind), P2(ind + 1 : D)]; 
            X2(i,:) = [P2(1 : ind), P1(ind + 1 : D)];
        end
        Xnewvirus = [X1; X2]; 
        for i = 1 : 2 * CR
            for d = 1:D
                if rand() <= MR
                    Xnewvirus(i,d) = 1 - Xnewvirus(i,d);
                    Xbestsol  = Xnewvirus(i,:);
                end
            end
        end
        
        %%---- apply uniform crossover between proteins to generate new solution
        subprotien =ones(nPop,D);
        subprotien(i,:) =x(k,:);
        Xnewvirus =ones(nPop,D);
        Xnewvirus(i,:)  =UniformCrossover(subprotien(1,:),subprotien(2,:));
        Xnewvirus(i,:)  =max(Xnewvirus(i,:), VarMin);
        Xnewvirus(i,:)  =min(Xnewvirus(i,:), VarMax);
        
    end
    % ======== calculating the cost of the new population
    for t=1:nPop
        childcost=CostFunction(Xnewvirus(t,:));
        %numofevaluaions=numofevaluaions+1;
        if childcost < bestsol.Cost
            bestsol.Position = Xnewvirus(t,:);
            bestsol.Cost=childcost;
        end
    end
    
    newPop = repmat(empty_individual, nPop, 1);
    % Mutation
    for l=1:nPop
        for k = 1: D
            R = rand()< 0.5;
            if R < MR
                Xnewvirus(l,k)=minVal+rand*(maxVal-minVal);
            end
            newPop(l).Position=Xnewvirus(l,:);
        end
        newPop(l).Position = max(newPop(l).Position, VarMin);
        newPop(l).Position = min(newPop(l).Position, VarMax);
        newPop(l).Cost=CostFunction(newPop(l).Position);
        if newPop(l).Cost < bestsol.Cost
            bestsol.Position = newPop(l).Position;
            bestsol.Cost=newPop(l).Cost;
        end
    end
    
    pop   = SortPopulation([pop; newPop]);
    Pos   = 1:d; 
    Sf    = Pos(Xbestsol == 1); 
    Nf    = length(Sf); 
    sFeat = feat(:,Sf);
    pop   = pop(1:nPop);
    curve(it) = bestsol.Cost;
    
    % Display Iteration Information
    disp(['Iteration ' num2str(it) ': Best Solution = ' num2str(curve(it))]);
end
