function [sFeat, Sf, Nf] = jACO(feat, label, N, max_Iter, tau, eta, alpha, beta, rho, HO)

    % Objective function
    fun = @jFitnessFunction;  % O(1)
    % Number of dimensions
    dim = size(feat, 2);  % O(1)
    % Initial Tau & Eta
    tau = tau * ones(dim, dim);  % O(dim^2)
    eta = eta * ones(dim, dim);  % O(dim^2)
    % Pre
    fitG = inf;  % O(1)
    fit = zeros(1, N);  % O(N)

    curve = inf;  % O(1)
    t = 1;  % O(1)
    %---Iterations start-------------------------------------------
    while t <= max_Iter  % O(max_Iter)
        % Reset ant
        X = zeros(N, dim);  % O(N * dim)
        for i = 1:N  % O(N)
            % Random number of features
            num_feat = randi([1, dim]);  % O(1)
            % Ant starts with a random position
            X(i, 1) = randi([1, dim]);  % O(1)
            k = [];
            if num_feat > 1  % O(1)
                for d = 2:num_feat  % O(num_feat)
                    % Start with the previous tour
                    k = [k(1:end), X(i, d-1)];  % O(d-1)
                    % Edge/Probability Selection
                    P = (tau(k(end), :) .^ alpha) .* (eta(k(end), :) .^ beta);  % O(dim)
                    % Set selected position = 0 probability
                    P(k) = 0;  % O(d-1)
                    % Convert probability
                    prob = P ./ sum(P(:));  % O(dim)
                    % Roulette Wheel selection
                    route = jRouletteWheelSelection(prob);  % O(dim)
                    % Store selected position to be the next tour
                    X(i, d) = route;  % O(1)
                end
            end
        end

        % Binary
        X_bin = zeros(N, dim);  % O(N * dim)
        for i = 1:N  % O(N)
            % Binary form
            ind = X(i, :);
            ind(ind == 0) = [];
            X_bin(i, ind) = 1;  % O(length(ind))
        end

        % Fitness
        for i = 1:N  % O(N)
            fit(i) = fun(feat, label, X_bin(i, :), HO);  % O(1)
            % Global update
            if fit(i) < fitG  % O(1)
                Xgb = X(i, :);  % O(dim)
                fitG = fit(i);  % O(1)
            end
        end

        % [Pheromone update rule on tauK]
        tauK = zeros(dim, dim);  % O(dim^2)
        for i = 1:N  % O(N)
            % Update Pheromones
            tour = X(i, :);
            tour(tour == 0) = [];
            len_x = length(tour);  % O(1)
            tour = [tour(1:end), tour(1)];  % O(len_x)
            for d = 1:len_x  % O(len_x)
                % Feature selected on graph
                x = tour(d);
                y = tour(d + 1);
                % Update delta tau k on graph
                tauK(x, y) = tauK(x, y) + (1 / (1 + fit(i)));  % O(1)
            end
        end

        % [Pheromone update rule on tauG]
        tauG = zeros(dim, dim);  % O(dim^2)
        tour = Xgb;  % O(dim)
        tour(tour == 0) = [];
        len_g = length(tour);  % O(1)
        tour = [tour(1:end), tour(1)];  % O(len_g)
        for d = 1:len_g  % O(len_g)
            % Feature selected on graph
            x = tour(d);
            y = tour(d + 1);
            % Update delta tau G on graph
            tauG(x, y) = 1 / (1 + fitG);  % O(1)
        end

        % Evaporate pheromone
        tau = (1 - rho) * tau + tauK + tauG;  % O(dim^2)

        % Save
        curve(t) = fitG;  % O(1)
        fprintf('\nIteration %d Best (ACO)= %f', t, curve(t))  % O(1)
        t = t + 1;  % O(1)
    end
    % Select features based on the selected index
    Sf = Xgb;  % O(dim)
    Sf(Sf == 0) = [];
    sFeat = feat(:, Sf);  % O(dim * length(Sf))
    Nf = length(Sf);  % O(1)
end
